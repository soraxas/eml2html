#!/usr/bin/env python3

import argparse
import email
import email.header
import quopri
import os
import sys

__version__ = "v1.0.0"

textTypes = ["text/plain", "text/html"]
imageTypes = ["image/gif", "image/jpeg", "image/png"]


def processEml(data):

    """
    Process the email (bytes), extract MIME parts and useful headers.
    Generate a PNG picture of the mail
    """

    msg = email.message_from_bytes(data)
    try:
        decode = email.header.decode_header(msg["Date"])[0]
        dateField = str(decode[0])
    except:
        dateField = "&lt;Unknown&gt;"

    try:
        decode = email.header.decode_header(msg["From"])[0]
        fromField = str(decode[0])
    except:
        fromField = "&lt;Unknown&gt;"
    fromField = fromField.replace("<", "&lt;").replace(">", "&gt;")

    try:
        decode = email.header.decode_header(msg["To"])[0]
        toField = str(decode[0])
    except:
        toField = "&lt;Unknown&gt;"
    toField = toField.replace("<", "&lt;").replace(">", "&gt;")

    try:
        decode = email.header.decode_header(msg["Subject"])[0]
        subjectField = str(decode[0])
    except:
        subjectField = "&lt;Unknown&gt;"
    subjectField = subjectField.replace("<", "&lt;").replace(">", "&gt;")

    try:
        decode = email.header.decode_header(msg["Message-Id"])[0]
        idField = str(decode[0])
    except:
        idField = "&lt;Unknown&gt;"
    idField = idField.replace("<", "&lt;").replace(">", "&gt;")

    html_parts = []
    attachments = []

    # Build a first image with basic mail details
    headers = """
    <table width="100%%">
      <tr><td align="right"><b>Date:</b></td><td>%s</td></tr>
      <tr><td align="right"><b>From:</b></td><td>%s</td></tr>
      <tr><td align="right"><b>To:</b></td><td>%s</td></tr>
      <tr><td align="right"><b>Subject:</b></td><td>%s</td></tr>
      <tr><td align="right"><b>Message-Id:</b></td><td>%s</td></tr>
    </table>
    <hr></p>
    """ % (
        dateField,
        fromField,
        toField,
        subjectField,
        idField,
    )

    html_parts.append(headers)

    #
    # Main loop - process the MIME parts
    #
    for part in msg.walk():
        mimeType = part.get_content_type()
        if part.is_multipart():
            continue

        if mimeType in textTypes:
            try:
                payload = quopri.decodestring(part.get_payload(decode=True)).decode(
                    "utf-8"
                )
            except:
                payload = str(quopri.decodestring(part.get_payload(decode=True)))[2:-1]

            # Cleanup dirty characters
            dirtyChars = ["\n", "\\n", "\t", "\\t", "\r", "\\r"]
            for char in dirtyChars:
                payload = payload.replace(char, "")

            html_parts.append(payload)
        # elif mimeType in imageTypes:
        #     payload = part.get_payload(decode=False)
        #     imgdata = base64.b64decode(payload)
        #     # Generate MD5 hash of the payload
        #     m = hashlib.md5()
        #     m.update(payload.encode('utf-8'))
        #     imagePath = m.hexdigest() + '.' + mimeType.split('/')[1]

        #     # with open(dumpDir / imagePath, 'wb') as f:
        #     #     f.write(imgdata)
        #     # html_parts.append(dumpDir / imagePath)
        else:
            fileName = part.get_filename()
            if not fileName:
                fileName = "Unknown"
            attachments.append("%s (%s)" % (fileName, mimeType))

    if len(attachments):
        footer = "<p><hr><p><b>Attached Files:</b><p><ul>"
        for a in attachments:
            footer = footer + "<li>" + a + "</li>"
        footer = footer + "</ul><p><br>Generated by EMLRender v1.0"
        html_parts.append(footer)

    return "".join(html_parts)


def is_valid_file(parser, arg):
    if not os.path.exists(arg):
        parser.error("The file '%s' does not exist!" % arg)
    if not arg.endswith(".eml"):
        parser.error("The file '%s' is not an eml file!" % arg)
    return open(arg, "rb")  # return an open file handle


parser = argparse.ArgumentParser()
parser.add_argument(
    "filename",
    type=lambda x: is_valid_file(parser, x),
    help="Input eml file",
    default=sys.stdin.buffer,
    nargs="?",
)
parser.add_argument("--version", action="version", version=f"eml2html.py {__version__}")


if __name__ == "__main__":
    args = parser.parse_args()
    html_str = processEml(args.filename.read())

    sys.stdout.write(html_str)
